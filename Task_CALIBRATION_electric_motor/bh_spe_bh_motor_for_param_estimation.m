function [pOpt, Info] = bh_spe_bh_motor_for_param_estimation(p)
%SPE_BH_MOTOR_FOR_PARAM_ESTIMATION
%
% Solve a parameter estimation problem for the bh_motor_for_param_estimation model.
%
% The function returns estimated parameter values, pOpt,
% and estimation termination information, Info.
%
% The input argument, p, defines the model parameters to estimate,
% if omitted the parameters specified in the function body are estimated.
%
% Modify the function to include or exclude new experiments or
% change the estimation options.
%
% Auto-generated by SPETOOL on 31-May-2016 14:43:15.
%--------------------------------------------------------------------------
% HISTORY:
% 01-Jun-2016 : modified by Brad (do NOT delete)
%--------------------------------------------------------------------------

%% Open the model.
open_system('bh_motor_for_param_estimation')

%% Specify Model Parameters to Estimate
%
if nargin < 1 || isempty(p)
    
    M_TAB = readtable('bh_MEAS_DATA_MOTOR.xlsx', 'Sheet', 'INITIAL_MOTOR_PARAMS', 'ReadRowNames',true)
    
    p = sdo.getParameterFromModel('bh_motor_for_param_estimation',{'Ka','b','L','J'});
    
    p(1).Minimum = M_TAB{'Ka','Min'};
    p(1).Maximum = M_TAB{'Ka','Max'};  p(1).Value = M_TAB{'Ka','Value'};
    p(2).Minimum = M_TAB{'b','Min'};
    p(2).Maximum = M_TAB{'b','Max'};   p(2).Value = M_TAB{'b','Value'};
    p(3).Minimum = M_TAB{'L','Min'};
    p(3).Maximum = M_TAB{'L','Max'};   p(3).Value = M_TAB{'L','Value'};
    p(4).Minimum = M_TAB{'J','Min'};
    p(4).Maximum = M_TAB{'J','Max'};   p(4).Value = M_TAB{'J','Value'};
end

%% Define the Estimation Experiments
bh_STAIRS = sdo.Experiment('bh_motor_for_param_estimation');

%%
% Specify the experiment input data 
bh_STAIRS_Sig_Input = Simulink.SimulationData.Signal;
bh_STAIRS_Sig_Input.Values    = LOC_bh_get_IO_data('INPUT_DATA');
bh_STAIRS_Sig_Input.BlockPath = 'bh_motor_for_param_estimation/VOLTS';
bh_STAIRS_Sig_Input.PortType  = 'inport';
bh_STAIRS_Sig_Input.PortIndex = 1;
bh_STAIRS_Sig_Input.Name      = 'VOLTS';
bh_STAIRS.InputData = bh_STAIRS_Sig_Input;

%%
% Specify the experiment output data 
bh_STAIRS_Sig_Output = Simulink.SimulationData.Signal;
bh_STAIRS_Sig_Output.Values    = LOC_bh_get_IO_data('OUTPUT_DATA');
bh_STAIRS_Sig_Output.BlockPath = 'bh_motor_for_param_estimation/MOTOR_MODEL';
bh_STAIRS_Sig_Output.PortType  = 'outport';
bh_STAIRS_Sig_Output.PortIndex = 1;
bh_STAIRS_Sig_Output.Name      = 'w_rad_per_sec';
bh_STAIRS.OutputData = bh_STAIRS_Sig_Output;

%%
% Create a model simulator from an experiment
Simulator = createSimulator(bh_STAIRS);

%% Create Estimation Objective Function
%
% Create a function that is called at each optimization iteration
% to compute the estimation cost.
%
% Use an anonymous function with one argument that calls bh_motor_for_param_estimation_optFcn.
optimfcn = @(P) bh_motor_for_param_estimation_optFcn(P,Simulator,bh_STAIRS);

%% Optimization Options
%
% Specify optimization options.
Options = sdo.OptimizeOptions;
Options.Method = 'lsqnonlin';
Options.OptimizedModel = 'bh_motor_for_param_estimation';

%% Estimate the Parameters
%
% Call sdo.optimize with the estimation objective function handle,
% parameters to estimate, and options.
[pOpt,Info] = sdo.optimize(optimfcn,p,Options);

%%
% Update the experiments with the estimated parameter values.
bh_STAIRS = setEstimatedValues(bh_STAIRS,pOpt);

%% Update Model
%
% Update the model with the optimized parameter values.
sdo.setValueInModel('bh_motor_for_param_estimation',pOpt);
end
%_#########################################################################
%                     END OF MAIN FUNCTION
%_#########################################################################
function Vals = bh_motor_for_param_estimation_optFcn(P,Simulator,bh_STAIRS)
%BH_MOTOR_FOR_PARAM_ESTIMATION_OPTFCN
%
% Function called at each iteration of the estimation problem.
%
% The function is called with a set of parameter values, P, and returns
% the estimation cost, Vals, to the optimization solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%%
% Define a signal tracking requirement to compute how well the model
% output matches the experiment data.
r = sdo.requirements.SignalTracking(...
    'Method', 'Residuals');
%%
% Update the experiment(s) with the estimated parameter values.
bh_STAIRS = setEstimatedValues(bh_STAIRS,P);

%%
% Simulate the model and compare model outputs with measured experiment
% data.
F_r = [];
Simulator = createSimulator(bh_STAIRS,Simulator);
strOT = mat2str(bh_STAIRS.OutputData(1).Values.Time);
Simulator = sim(Simulator, 'OutputOption', 'SpecifiedOutputTimes', 'OutputTimes', strOT);

SimLog = find(Simulator.LoggedData,get_param('bh_motor_for_param_estimation','SignalLoggingName'));
Sig = find(SimLog,bh_STAIRS.OutputData.Name);

Error = evalRequirement(r,Sig.Values,bh_STAIRS.OutputData.Values);
F_r = [F_r; Error(:)];

%% Return Values.
%
% Return the evaluated estimation cost in a structure to the
% optimization solver.
Vals.F = F_r;
end
%==========================================================================
% End of LOCAL function
%==========================================================================
function Data = LOC_bh_get_IO_data(action_str)

    MOTOR_MEAS_DATA = readtable('bh_MEAS_DATA_MOTOR.xlsx', ...
                                'Sheet', 'MOTOR_ONLY_STAIRS');

    T    = MOTOR_MEAS_DATA.time_secs; 
    V    = MOTOR_MEAS_DATA.IN_VOLTS;
    W    = MOTOR_MEAS_DATA.OUT_W_RAD_PER_SEC;    
    
    V_TS = timeseries(V,T, 'Name', 'VOLTS');
    W_TS = timeseries(W,T, 'Name', 'w_rad_per_sec');


    switch( upper(action_str) )
        case 'INPUT_DATA'
                           Data = V_TS;
        case 'OUTPUT_DATA'
                           Data = W_TS;
        otherwise
             error('UNknown action string !');     
    end

end
%==========================================================================
% End of LOCAL function
%==========================================================================

